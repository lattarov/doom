* System setup
** TODO Setup script
Do a command to be run by the target system's package manager/other to install all necessary dependencies, set environment variables, etc.
** Security
*** Resources
- [[https://christitus.com/linux-security-mistakes/][The 3 Biggest Security Mistakes Linux Users Make]]
*** Setting up firewall
By default in most distros, the firewall is not active. In order to install it, install a firewall configuration tool (such as Firewall Configuration in debian-based distros), and do at least the following:

#+begin_src sh :tangle no
sudo ufw limit 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw enable
#+end_src
*** Setting up [[https://github.com/fail2ban/fail2ban][fail2ban]]
fail2ban is a tool that will block repeated failing incoming connexions (particularly useful against brute force attacks) and can be installed via

#+begin_src sh :tangle no
sudo apt-get install fail2ban
#+end_src

The following default config file is recommended by the link in resources subsection

#+begin_src conf :tangle no
[DEFAULT]
ignoreip = 127.0.0.1/8 ::1
bantime = 3600
findtime = 600
maxretry = 5

[sshd]
enabled = true
#+end_src

The following will activate the systemd service:
#+begin_src sh :tangle no
sudo systemctl enable fail2ban
sudo systemctl start fail2ban
#+end_src
*** [[https://www.apparmor.net/][AppArmor]]
App to set behavioural profiled restrictions to apps running in this machine. It mainly targets Linux servers, but it can be a very powerful tool for security in desktop environment.

Configuration is not very straightforward according to reddit and forums...

to check if it's currently running, do
#+begin_src sh :tangle no
aa-status
#+end_src

if AppArmor is running, the following should be printed:

#+begin_quote
apparmor module is loaded.
#+end_quote

It's already preinstalled in !PopOS 22.04
*** NTSync module loading
The loadable module ntsync, available since kernel 6.14, greatly improves Windows emulated software performance. Though available, it is not loaded by default.

In order to load it at boot time, simply add

#+begin_quote
ntsync
#+end_quote

to [[/etc/modules]].


* Tasks
** DONE Add packages.el configuration here
** IDEA Add init.el configuration here
*** [?] how to know about new flags and updates for modules if init.el content is here?

* Compiling emacs :WIP:
** TODO full install procedure
#+begin_src sh :tangle no
# TODO log steps
# TODO fetch repos
# TODO verify checksum

JOBS=`nproc --ignore=1` # use almost all cores

# taken from
# https://gist.github.com/abidanBrito/2b5e447f191bb6bb70c9b6fe6f9e7956 for the rest
# https://www.reddit.com/r/emacs/comments/123klvf/emacs29_build_from_git_with_sqlite3/ (for sqlite3 error)
 ./autogen.sh && ./configure     --with-dbus      --with-native-compilation      --with-mailutils    -with-pgtk --with-imagemagick --with-gif --with-jpeg --with-png --with-xml2 --with-tiff --with-x-toolkit=yes --with-libsystemd --with-modules --with-gnutls -with-wide-int --with-x-toolkit=no  CFLAGS="-O2 -pipe -mtune=native -march=native -fomit-frame-pointer"

sudo make -j${JOBS} NATIVE_FULL_AOT=1

sudo make install
#+end_src

** Setting up systemd service
run the following command once:

#+begin_src bash :tangle no
systemctl --user enable --now emacs
#+end_src

If a restart is necessary, run

#+begin_src bash :tangle no
systemctl --user restart emacs
#+end_src

* Cross platform compatibility :wip:
#+begin_src emacs-lisp :tangle config.el
(defcustom vlv/environment "PERSONAL" "The current environment.

This will be used to activate or not certain functionalities
of this configuration, maily by tangling or not certain babel
code blocks.

TODO: replace this by a dedicated config for work once the doom
profiles API is stable.
"
  :type 'string
  :options '("WORK" "PERSONAL"))

(defun vlv/environment ()
  "Gets and displays in minibuffer the environment."
  (interactive)
  (if (eq system-type 'gnu/linux)
      (setopt vlv/environment "PERSONAL")
      (setopt vlv/environment "WORK"))
  (message vlv/environment))

(vlv/environment)
#+end_src

* Doom
** font

#+begin_src emacs-lisp :tangle config.el
(setopt doom-font (font-spec :family "Cascadia Code" :size 18))
#+end_src

** UI

#+begin_src emacs-lisp :tangle config.el
(add-to-list 'default-frame-alist '(alpha-background . 60))
#+end_src

* Emacs general configs
** Personal information
#+begin_src emacs-lisp :tangle config.el
(setopt user-full-name    "Victor Lattaro Volpini"
        user-mail-address "victorlattaro@gmail.com")
#+end_src

** Revert buffers when the underlying file has changed
#+begin_src emacs-lisp :tangle config.el
(setopt global-auto-revert-mode t

        ;; Revert Dired and other buffers
        global-auto-revert-non-file-buffers t)
#+end_src

** Editing
#+begin_src emacs-lisp :tangle config.el
(add-hook! 'prog-mode-hook
        (olivetti-mode))
#+end_src

** Terminals (WIP)
this configures bash to be used as the default shell bash. In theory it corrects a few issues concerning

#+begin_src emacs-lisp :tangle no
;; Configuring terminal for windows
(if (eq system-type 'windows-nt)
        (setq shell-file-name "C:/Windows/system32/bash.exe")
        (setenv "ESHELL" "bash")
 )
#+end_src
*** eshell
#+begin_src emacs-lisp :tangle config.el
(add-hook! 'eshell-mode-hook
  (olivetti-mode))
#+end_src
* olivetti mode

#+begin_src emacs-lisp :tangle packages.el
(package! olivetti
  :pin "845eb7a95a3ca3325f1120c654d761b91683f598")
#+end_src

#+begin_src emacs-lisp :tangle config.el
(add-hook! 'olivetti-mode-hook
    (olivetti-set-width 120))
#+end_src

* Org
** Basic config
#+begin_src emacs-lisp :tangle config.el
(use-package! org
  :init
    (if (string-equal vlv/environment "WORK")
            (setopt org-directory "~/OneDrive - Kestrel Vision/org")
            (setopt org-directory "~/org/"))

  :config
    (add-hook! 'org-mode-hook
            (olivetti-mode)))
#+end_src
** Org agenda
*** Improvements
**** ideas from [[https://www.youtube.com/watch?v=a_WNtuefREM][Making Org Agenda Look Beautiful - YouTube]]
***** TODO  [[https://github.com/alphapapa/org-super-agenda][GitHub - alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda...]] integration
***** TODO add icons and improve agenda view using icons
***** TODO create templates for org roam to create events from nodes

*** Configuration
#+begin_src emacs-lisp :tangle config.el
(after! org-agenda
    (setopt org-journal-enable-agenda-integration t)
    (setopt org-agenda-start-on-weekday 1)) ;; start on monday
#+end_src

** Org Roam
Shortcuts are mapped with the SPC n r prefix by default.
#+begin_src emacs-lisp :tangle packages.el
(package! org-roam-ui
  :pin "5ac74960231db0bf7783c2ba7a19a60f582e91ab")
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! websocket
  :defer t
  :after org-roam)

(use-package! org-roam-ui
  :defer t
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)

  (setopt org-roam-directory (expand-file-name "roam/" org-directory)) ;; necessary use the org directory set on the

  (map! :leader
        (:prefix ("n" . "org")
        (:prefix ("r" . "roam")
         :desc "Open org roam UI" "u" #'org-roam-ui-mode))))
#+end_src
* Python
** Conda
#+begin_src emacs-lisp :tangle config.el
(use-package! conda
  :defer t
  :config
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))
#+end_src
* uv :wip:
A new package manager for python, much faster and simpler to use than conda or miniconda.

#+begin_src emacs-lisp :tangle no

(package! uv-menu
  :type 'core
  :recipe '(:host github
            :repo "pizzatorque/uv-menu"
            :branch "main"
            :files ("uv.el")))

#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! uv-menu)

#+end_src

* Projectile
Allow automatic recognition of projects given a list of paths.
#+begin_src emacs-lisp :tangle config.el
(use-package! projectile
  :config
    (setopt +workspaces-on-switch-project-behavior t)
    (setopt projectile-project-search-path '("~/dev")))
#+end_src

* Dirvish
#+begin_src emacs-lisp :tangle config.el
(use-package! dirvish
  :config
  (setopt dirvish-quick-access-entries
          (let ((org-path (expand-file-name org-directory)))
            `(("h" "~/" "Home")
              ("d" "~/Downloads/" "Downloads")
              ("D" "~/Documents/" "Documents")
              ("t" "c:/Tiama/" "Tiama")
              ("o" ,org-path "Org")
              ("r" "~/dev/repos/" "Repos")))))

(map! :leader
    (:prefix ("o" . "open")
    :desc "dirvish-side" "d" #'dirvish))
#+end_src

#+begin_src emacs-lisp :tangle no
;; FIXME This does not rebind + to a new menu.
(map! :after dired
      :map dired-mode-map
      "+" nil)

(map! :after dirvish
      :map (dirvish-mode-map dirvish-directory-view-mode-map)
      :prefix (("" . "new")
      :desc "file" "d" #'dired-create-directory
      :desc "file" "f" #'dired-create-empty-file))
#+end_src

* YASNIPPET
#+begin_src emacs-lisp :tangle config.el
(after! yasnippet
    (defun yasnippet-extract-arg-and-type (arg)
    "Extract argument name and type from a string of the form 'arg: type'."
    (let* ((parts (split-string arg ": ")))
        (if (= (length parts) 2)
            (cons (car parts) (cadr parts))
        (cons (car parts) "type"))))

    (defun yasnippet-python-params-doc (arg-string)
    "Generates a docstring for parameters in NumPy style with optional type annotations.
    If there are no arguments, returns ''."
    (let* ((args (split-string arg-string ", "))
            (formatted-doc
            (if (string-blank-p arg-string)
                ""
                (mapconcat (lambda (arg)
                            (let* ((arg-pair (yasnippet-extract-arg-and-type arg))
                                    (arg-name (car arg-pair))
                                    (arg-type (cdr arg-pair)))
                            ;; TODO: Generate placeholders for each parameter description.
                            (format "%s : %s\n        TODO: Description of %s." arg-name arg-type arg-name)))
                        args
                        "\n    "))))
        formatted-doc))

    (defun yasnippet-python-parameter-assignments (arg-string)
    "Convert a comma-separated string of arguments into self assignments.
    If there are no arguments, returns 'pass'."
    (let* ((args (split-string arg-string ", "))
            (assignments
            (if (string-blank-p arg-string)
                "pass"
                (mapconcat (lambda (arg)
                            (let* ((parts (split-string arg ": "))
                                    (name (car parts)))
                            (format "self.%s = %s" name name)))
                        args
                        "\n        "))))
        assignments)))
#+end_src

** CC mode
*** LSP (clangd)
#+begin_src emacs-lisp :tangle config.el
(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))
#+end_src
*** CMAKE-IDE
[[https://github.com/Fox7Fog/emacs-cmake-ide][GitHub - Fox7Fog/emacs-cmake-ide: Use Emacs as a C/C++ IDE]]
#+begin_src emacs-lisp :tangle packages.el
(package! cmake-ide
  :pin "28dc4ab5bd01d99553901b4efeb7234280928b18")
#+end_src

#+begin_src emacs-lisp :tangle config.el
(cmake-ide-setup)
#+end_src

*** TODO Fine tune LSP flags
* Large language model (LLM) support
To priviledge local usage of LLMs, we'll use [[https://ollama.com/][Ollama]] to run LLM models locally.

** ollama installation
Installation procedure is available in [[https://ollama.com/download/linux][Download Ollama on Linux]]:

#+begin_src sh :tangle no
curl -fsSL https://ollama.com/install.sh | sh
#+end_src

** GPTEL configuration
Set ollama as default backend for gptel, add default model and a few tweaks.

#+begin_src emacs-lisp :tangle config.el
(after! gptel
  ;; window to scroll automatically as the response is inserted
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  ;; make cursor to move to the next prompt after the response is inserted
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response)

  ;; default model
  (setopt gptel-model 'deepseek-r1:8b)

  ;; adding Ollama backend
  (setopt gptel-backend (gptel-make-ollama "Ollama"
          :host "localhost:11434"
          :stream t
          :models '((ifioravanti/llamantino-2) (deepseek-r1:8b)))))
#+end_src

** Process management
**** Spawning a terminal process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/watch (command &optional name)
  "Runs \"watch COMMAND\" in a `term' buffer.  \"q\" to exit."
  (interactive
   (list (read-from-minibuffer "watch " nil nil nil t)))
  (let* ((name (or name (concat "watch " command)))
         (switches (split-string-and-unquote command))
         (termbuf (apply 'make-term name "watch" nil switches))
         (proc (get-buffer-process termbuf)))
    (set-buffer termbuf)
    (term-mode)
    (term-char-mode)
    (setq show-trailing-whitespace nil)
    ;; Kill the process interactively with "q".
    (set-process-query-on-exit-flag proc nil)
    (let ((map (make-sparse-keymap))
          (cmdquit (make-symbol "watch-quit")))
      (put cmdquit 'function-documentation "Kill the `watch' buffer.")
      (put cmdquit 'interactive-form '(interactive))
      (fset cmdquit (apply-partially 'kill-process proc))
      (set-keymap-parent map (current-local-map))
      (define-key map (kbd "q") cmdquit)
      (use-local-map map))
    ;; Kill the buffer automatically when the process is killed.
    (set-process-sentinel
     proc (lambda (process signal)
            (and (memq (process-status process) '(exit signal))
                 (buffer-live-p (process-buffer process))
                 (kill-buffer (process-buffer process)))))
    ;; Display the buffer.
    (switch-to-buffer termbuf)))
#+end_src
**** Spawning nvidia smi watch process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/open-nvidia-performance_tracker ()
  (interactive)
  "Starts a process to display NVIDIA GPU data.

Spaws a child process using UNIX watch command using nvidia-smi command."

  (interactive)
  (vlv/watch "-n0.1 nvidia-smi"))
#+end_src
* bug-hunter
#+begin_src emacs-lisp :tangle packages.el
(package! bug-hunter)
#+end_src

* elfeed
#+begin_src emacs-lisp :tangle config.el
(use-package! elfeed
  :config
  ;; the basic value cuts a part of the feed's title.
  ;; Increasing the column width fixes it.
  (setopt elfeed-goodies/feed-source-column-width 25))

(map! :leader
    (:prefix ("e" . "elfeed")
    :desc "Enter elfeed" "e" #'elfeed
    :desc "Update all feeds" "u" #'elfeed-update))

;; copy elfeed.org to the org directory
(dired-copy-file (expand-file-name "elfeed.org" doom-user-dir) org-directory t)
#+end_src

** Removing items from the feed
Strangely, elfeed does not allow us to delete entries that we don't want to see
in the feed anymore. Moreover, when a feed is deleted, its entries are not
removed from the feed.

A solution is proposed by [[https://github.com/skeeto/elfeed/issues/392][skeeto/elfeed#392 Deleting feeds with all their
entries]], it works by deleting selected items feed from elfeed's database.
#+begin_src emacs-lisp :tangle config.el
(after! elfeed
    (defun sk/elfeed-db-remove-entry (id)
    "Removes the entry for ID"
    (avl-tree-delete elfeed-db-index id)
    (remhash id elfeed-db-entries))

    (defun sk/elfeed-search-remove-selected ()
    "Remove selected entries from database"
    (interactive)
    (let* ((entries (elfeed-search-selected))
            (count (length entries)))
        (when (y-or-n-p (format "Delete %d entires?" count))
        (cl-loop for entry in entries
                do (sk/elfeed-db-remove-entry (elfeed-entry-id entry)))))
    (elfeed-search-update--force)))
#+end_src
* Completions
** Corfu
#+begin_src emacs-lisp :tangle config.el
(after! corfu
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
#+end_src
** Consult-omni :wip:
[[https://github.com/armindarvish/consult-omni?tab=readme-ov-file#drop-in-example-config][GitHub - armindarvish/consult-omni: A Powerful Versatile Omni Search inside E...]]

"consult-omni is a package for getting search results from one or several custom
sources (web search engines, AI assistants, elfeed database, org notes, local
files, desktop applications, mail servers, …) directly in Emacs minibuffer. It
is a successor of consult-web, with expanded features and functionalities."

It still in its beta phase, having its first release in July 24'.

Some security concerns arise due to using emacs as a web browser... This is to
be tested and tracked over time. The project seems nevertheless extremely
promising and would bring plenty of nice features to the config.


#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "packages.el" "no")
(package! consult-mu
  :recipe '(:host github
            :repo "armindarvish/consult-mu"
            :files (:defaults "extras/*.el")))
#+end_src

#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "config.el" "no")
(use-package! consult-mu
  :custom

  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed
  (consult-mu-mark-previewed-as-read nil)
  ;;do not amrk email as read when selected. This is a good starting point to ensure you would not miss important emails marked as read by mistake especially when trying this package out. Later you can change this to t.
  (consult-mu-mark-viewed-as-read nil)
  ;; open the message in mu4e-view-buffer when selected.
  (consult-mu-action #'consult-mu--view-action))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! consult-omni
  :type 'core
  :recipe '(:host github
            :repo "armindarvish/consult-omni"
            :files ("sources/*.el" "consult-omni.el" "consult-omni-embark.el")
            :build t))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! consult-omni
  :defer t
  :custom

  ;; General settings that apply to all sources
  (consult-omni-show-preview t) ;;; show previews
  (consult-omni-preview-key "C-o") ;;; set the preview key to C-o
  :config
  ;; Load Sources Core code
  (require 'consult-omni-sources)
  ;; Load Embark Actions
  (require 'consult-omni-embark)

  ;;; Select a list of modules you want to aload, otherwise all sources all laoded
  (setopt consult-omni-sources-modules-to-load (list 'consult-omni-notes  'consult-omni-file 'consult-omni-buffer 'consult-omni-buffer-search 'consult-omni-elfeed 'consult-omni-wikipedia 'consult-omni-apps 'consult-omni-dictionary 'consult-omni-gptel 'consult-omni-youtube))

  (consult-omni-sources-load-modules)
  ;;; set multiple sources for consult-omni-multi command. Change these lists as needed for different interactive commands. Keep in mind that each source has to be a key in `consult-omni-sources-alist'.
  (setopt consult-omni-multi-sources '("calc"
                                     "File"
                                     "Buffer"
                                     ;; "DuckDuckGo"
                                     ;; "Bookmark"
                                     "Apps"
                                     "gptel"
                                     ;; "Brave"
                                     "Dictionary"
                                     ;; "Google"
                                     "Wikipedia"
                                     "elfeed"
                                     ;; "mu4e"
                                     "buffers text search"
                                     "Notes Search"
                                     "Org Agenda"
                                     ;; "GitHub"
                                     "YouTube"
                                     ;; "Invidious"
                                     ))

;; Per source customization

;;; Set your shorthand favorite interactive command
 (setopt consult-omni-default-interactive-command #'consult-omni-multi))
:bind
  (map! :leader
        (:prefix ("s" . "search")
         :desc "consult-omni-multi" "s" #'consult-omni-multi))
#+end_src
*** YouTube search API
#+begin_src emacs-lisp :tangle config.el
(setq consult-omni-youtube-search-key "AIzaSyAMbCC2_BQRaGifhK2tVifSOTCwucT9Lao")
#+end_src
**** TODO Encrypt
* Mail
** Mu4e
*** WARNING Installation error pitfall
Because of some Ubuntu based bug, if mu4e was installed by the package manager (APT in Pop OS case) then the following bug shows up:

#+begin_quote
execute-extended-command: Cannot open load file: No such file or directory, mu4e
#+end_quote

As recommended in doom's mu4e docs as well as in [[https://github.com/doomemacs/doomemacs/issues/7885][doomemacs/doomemacs#7885 Can't open mu4e]] , manually adding the load path fixes this.

#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "config.el" "no")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

But different bugs arise, apparently related to a header error in mu4e or something else. It seems that the mu version installed by apt is not really functional.

**** Mu4e
WARNING there's a hard dependency between mu and mu4e versions.
#+begin_src sh :tangle no
sudo apt-get install mu4e
#+end_src

In order to set the mail directory and do the first setup for mu's database, use the following command:


*** Dependencies
**** mbsync (aka isync)
#+begin_src sh :tangle  no
sudo apt-get install isync
#+end_src

mbsync also requires a config file (by default .mbsyncrc) to be placed in the home directory. See each mail provider's section for more information.


Next, the mail directory, or MailDir in mu's vocabulary. By default, it's a ~/Mail, which is not automatically created. Let's do so:

#+begin_src sh :tangle no
mkdir ~/Mail
#+end_src

finally, the following command pulls the mail from the given provider:

#+begin_src sh :tangle no
mbsync -Va
#+end_src

***** GMail

#+begin_src ini :tangle no
IMAPStore gmail-remote
Host imap.gmail.com
SSLType IMAPS
AuthMechs LOGIN
User victorlattaro@gmail.com
Pass "epcw alkb kynv svai"

MaildirStore gmail-local
Path ~/Mail/gmail/
Inbox ~/Mail/gmail/INBOX
Subfolders Verbatim

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Create Both
Expunge Both
Patterns *
SyncState *
#+end_src
****** TODO Encrypt password

***** TODO Proton
- needs a paid account and the proton bridge daemon installed.
- running this in the background can eat up A LOT of memory, this is to be tested before going forward.
***** TODO Outlook

**** mu
***** Setup and installation

The solution was to manually compile mu and install it by following instructions in [[github:https://github.com/djcb/mu][mu]].

According to the README:

To be able to build mu, ensure you have:

a C++17 compiler (gcc or clang are known to work)
development packages for Xapian and GMime and GLib (see meson.build for the versions)
basic tools such as make, sed, grep
meson

clone somewhere the latest release from mu, I used https://github.com/djcb/mu/releases/tag/v1.12.7
(this version already comes with mu4e)

****** Dependencies
#+begin_src sh :tangle no
sudo apt-get install meson libgmime-3.0-dev libxapian-dev
#+end_src

****** Compile
cd wherever mu release tarball was decompressed and

#+begin_src sh :tangle no
./autogen.sh && make
sudo make install
#+end_src

The tarball contains mu and mu4e.

****** Init and index mail in maildir
Create the Maildir, in this config it is set to ~/Mail and run

#+begin_src sh :tangle no
mu init --maildir ~/Mail
mu index
#+end_src

if mu4e is not found in Emacs, add the path (probably the one below to the load-path)

#+begin_src emacs-lisp :tangle config.el
;; installation path for mu4e installed by the makefile of mu-1.12.7
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#+end_src

From this point onwards, mu4e should be up and running.
*** Configuration

#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "config.el" "no")
;; Each path is relative to the path of the maildir you passed to mu

;; (setq mu4e-get-mail-command "mbsync gmail"
;;       ;; get emails and index every 5 minutes
;;       mu4e-update-interval 300
;; 	  ;; send emails with format=flowed
;; 	  mu4e-compose-format-flowed t
;; 	  ;; no need to run cleanup after indexing for gmail
;; 	  mu4e-index-cleanup nil
;; 	  mu4e-index-lazy-check t
;;       ;; more sensible date format
;;       mu4e-headers-date-format "%d.%m.%y")

(set-email-account! "@gmail.com"
  '((mu4e-sent-folder       . "/gmail/Sent Mail")
    (mu4e-drafts-folder     . "/gmail/Drafts")
    (mu4e-trash-folder      . "/gmail/Trash")
    (mu4e-refile-folder     . "/gmail/All Mail")
    (smtpmail-smtp-user     . "victorlattaro@gmail.com")
    (mu4e-compose-signature . "---\nVictor Lattaro Volpini"))
  )
;; if "gmail" is missing from the address or maildir, the account must be
;; specified manually in `+mu4e-gmail-accounts':
(setq +mu4e-gmail-accounts '(("victorlattaro@gmail.com" . "/victorlattaro")))

;; Each path is relative to the path of the maildir you passed to mu
(setq mu4e-index-cleanup nil
      ;; because gmail uses labels as folders we can use lazy check since
      ;; messages don't really "move"
      mu4e-index-lazy-check t)
#+end_src

* Copilot :wip:

17/01/25 - The package breaks A LOT of stuff in Windows, breaks LSP integration (currently using LSP-mode) and server needs to be reinstalled quite often.
#+begin_src emacs-lisp :tangle no
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
#+end_src

#+begin_src emacs-lisp :tangle no
;; accept completion from copilot and fallback to company
(use-package! copilot
  :defet t
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

#+end_src

* Work
** TightVNC
*** Transient menu :WIP:
#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "WORK") "config.el" "no")
(require 'transient)
(defvar vlv/vnc-machines
    '(("VISIO"            . "10.4.54.221")
      ("VERN"             . "10.102.31.63")
      ("Gamora"           . "10.4.52.13")
      ("Groot"            . "10.4.52.9" )
      ("Rocket"           . "10.4.52.11")
      ("Mantis"           . "10.4.52.17")
      ("Starlord"         . "10.4.52.3")
      ("BDT-INCA10-VERN"  . "10.102.31.64"))
    "Alist mapping machine names to their TightVNC IPs.")

(defvar vlv/vncviewer-path "C:/Program Files/TightVNC/tvnviewer.exe"
    "Path to the TightVNC client.")

(defvar vlv/vnc-password "ADMINVME"
    "Default password.")

(defun vlv/connect-to-vnc-with-machine (machine)
    "Connect to a given machine via VNC given it's name."
    (let ((ip (cdr (assoc machine vlv/vnc-machines))))
    (message ip)
    (if (and ip (file-exists-p vlv/vncviewer-path))
            (start-process "tightvnc" nil vlv/vncviewer-path ip (concat "-password=" vlv/vnc-password))
    (message "Error: Wrong path to TightVNC or bad password!"))))

(defun vlv/connect-to-vnc-with-ip (ip)
    "Conectar ao VNC na máquina IP."
    (if (and ip (file-exists-p vlv/vncviewer-path))
        (start-process "tightvnc" nil vlv/vncviewer-path ip (concat "-password=" vlv/vnc-password))
    (message "Error: Failed to launch TightVNC")))

(defun vlv/vnc-menu-items ()
    "Return a list of transient menu items for VNC machines."
    (mapcar (lambda (pair)
            (list (substring (car pair) 0 1) (car pair)
                    (lambda () (interactive) (vlv/connect-to-vnc (car pair)))))
            vlv/vnc-machines))

(transient-define-prefix vlv/vnc-menu ()
"Transient menu for selecting a TightVNC machine."
    [["Machines"
    ("a" "VISIO"      (lambda () (interactive) (vlv/connect-to-vnc-with-machine "VISIO")))
    ("z" "VERN"       (lambda () (interactive) (vlv/connect-to-vnc-with-machine "VERN")))
    ("g" "Gamora"     (lambda () (interactive) (vlv/connect-to-vnc-with-machine "Gamora")))
    ("G" "Groot"      (lambda () (interactive) (vlv/connect-to-vnc-with-machine "Groot")))
    ("r" "Rocket"     (lambda () (interactive) (vlv/connect-to-vnc-with-machine "Rocket")))
    ("m" "Mantis"     (lambda () (interactive) (vlv/connect-to-vnc-with-machine "Mantis")))
    ("s" "Starlord"   (lambda () (interactive) (vlv/connect-to-vnc-with-machine "Starlord")))
    ("o" "Choose IP:" (lambda () (interactive) (vlv/connect-to-vnc-with-ip  (read-string "IP:"))))]])

(global-set-key(kbd "C-c v") 'vlv/vnc-menu)
#+end_src


** Visual Studio
#+begin_src emacs-lisp tangle config.el
(defun open-sln-in-visual-studio ()
  "Find all .sln files in the current Projectile project and open one in Visual Studio at the current buffer's file."
  (interactive)
  (let* ((project-root (projectile-project-root))
         (sln-files (directory-files-recursively project-root "\\.sln$"))
         (current-file (buffer-file-name)))
    (if (null sln-files)
        (message "No .sln files found in the project.")
      (let ((chosen-sln (if (= (length sln-files) 1)
                            (car sln-files)
                          (completing-read "Choose a solution: " sln-files nil t))))
            (let* ((command (format "start devenv \"%s\"" chosen-sln)))
              (message "Running: %s" command)
              (start-process-shell-command "open-sln" nil command))))))
#+end_src
** Wind River Workbench

#+begin_src emacs-lisp :tangle config.el
(defcustom vlv/workbench-start-script-path
  "~/dev/repos/089-VXWORKS_CALIA4/workbench-4/startWorkbench.bat"
  "The path to the batch script that starts the WindRiver workbench IDE.")

(defun vlv/open-workbench ()
    (interactive)
    (start-process "workbench" nil vlv/workbench-start-script-path))
#+end_src

* Compiler explorer
#+begin_src emacs-lisp :tangle packages.el
(package! compiler-explorer
  :pin "0111e651cfcd6c3147e370ccbcf04c104d3e8fb2"
  :recipe '(:host github
            :repo "mkcms/compiler-explorer.el"
            :build t))
#+end_src
* DevDocs.el
#+begin_src emacs-lisp :tangle packages.el
(package! devdocs
  :pin "d2214d34cdeb4483a594dd6973fcd095cef4653f")
#+end_src

#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :prefix ("s" . "+search")
      :desc "devdocs-lookup"
      "d" #'devdocs-lookup)
#+end_src
* Spotify
#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "packages.el" "no")
(package! spotify
  :pin "d918b5187638e0c44a2a2584f3980244b6aae3fa")
#+end_src

#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "config.el" "no")
(use-package! spotify
  :config

    (defun vlv/spotify-next-and-display()
    "Plays the next song and displays it's author, name and album."
    (interactive)
    (spotify-next)
    (call-interactively 'spotify-current))

    (defun vlv/spotify-previous-and-display()
    "Plays the previous song and displays it's author, name and album."
    (interactive)
    (spotify-previous)
    (call-interactively 'spotify-current))

    (defun vlv/spotify-playpause-and-display()
    "Toggles pause and displays it's author, name and album."
    (interactive)
    (spotify-playpause)
    (call-interactively 'spotify-current))

    (map! :leader
        (:prefix ("v" . "perso")
        :desc "spotify-play/pause" "p" #'vlv/spotify-playpause-and-display
        :desc "spotify-previous" "P" #'vlv/spotify-previous-and-display
        :desc "spotify-open" "q" #'spotify-quit
        :desc "spotify-next" "n" #'vlv/spotify-next-and-display)))
#+end_src
* vterm
Found an interesting completion mechanism in [[https://www.reddit.com/r/emacs/comments/ovkyov/vterm_completion_for_files_directories_command/][this reddit post]] and it considerably improves usage.

#+begin_src emacs-lisp :tangle config.el
(use-package! vterm
  :config
  (defun get-full-list ()
    (let ((program-list (split-string (shell-command-to-string "compgen -c") "\n" t ))
          (file-directory-list (split-string (shell-command-to-string "compgen -f") "\n" t ))
          (history-list (with-temp-buffer
                          (insert-file-contents "~/.bash_history")
                          (split-string (buffer-string) "\n" t))))

      (delete-dups (append program-list file-directory-list history-list))))

  (defun vterm-completion-choose-item ()
    (completing-read "Choose: " (get-full-list) nil nil (thing-at-point 'word 'no-properties)))

  (defun vterm-completion ()
    (interactive)
    (vterm-directory-sync)
    (setq vterm-chosen-item (vterm-completion-choose-item))
    (when (thing-at-point 'word)
      (vterm-send-meta-backspace))
    (vterm-send-string vterm-chosen-item))

  (defun vterm-directory-sync ()
    "Synchronize current working directory."
    (interactive)
    (when vterm--process
      (let* ((pid (process-id vterm--process))
             (dir (file-truename (format "/proc/%d/cwd/" pid))))
        (setq default-directory dir))))

  :general
  (:states 'insert
           :keymaps 'vterm-mode-map
           "<tab>" 'vterm-completion))



#+end_src

* multi-vterm
#+begin_src emacs-lisp :tangle packages.el
(package! multi-vterm
  :pin "36746d85870dac5aaee6b9af4aa1c3c0ef21a905")
#+end_src

* Emacs Application Framework EAF :WIP:

#+begin_src emacs-lisp :tangle no

(package! eaf
  :recipe '(
    :host github
    :repo "emacs-eaf/emacs-application-framework"
    :files ("*.el" "*.py" "core" "app" "*.json")
    :includes (eaf-browser) ; Straight won't try to search for these packages when we make further use-package invocations for them
    :pre-build '(("python" "install-eaf.py" "--install" "browser" "--ignore-sys-deps"))))
#+end_src

#+begin_src emacs-lisp :tangle no
(add-load-path! "~/.config/emacs/.local/straight/repos/emacs-application-framework")
(require 'eaf-browser)
#+end_src

* Whisper

Whisper.el is a package that allows voice to text transcription in Emacs. It needs a few dependencies, namely
 - [[https://ffmpeg.org/][FFmpeg]]: "A complete, cross-platform solution to record, convert and stream audio and video."
   Can be installed using
   #+begin_src sh :tangle no
sudo apt-get install ffmpeg
   #+end_src
 - [[https://github.com/ggml-org/whisper.cpp][whisper.cpp]]: Port of OpenAI's Whisper model in C/C++
   Is fetched and compiled by running whisper. Needs git, a C++ compiler and CMake.

#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "packages.el" "no")
(package! whisper.el
  :pin "fc122657bfb8d5faf6aedaefdc1687193f456d1f"
  :recipe '(
    :host github
    :repo "natrys/whisper.el"))
#+end_src


#+begin_src emacs-lisp :tangle (if (string-equal 'vlv/environment "PERSONAL") "config.el" "no")
(use-package! whisper.el
  :defer t ;; A configuration error appears if the fur is not set.
  :config
  (setopt whisper-install-directory "/tmp/")
          whisper-model "base"
          whisper-language "en"
          whisper-translate nil
          whisper-use-threads (/ (num-processors) 2))

(defun vlv/call-whisper-run-print-language ()
    (minibuffer-message
        (concat
            "Calling whisper-run with language: " (symbol-value 'whisper-language)))
    (call-interactively 'whisper-run))

(defun vlv/whisper-run-english ()
    (interactive)
    (setopt whisper-language "en")
    (vlv/call-whisper-run-print-language))

(defun vlv/whisper-run-portuguese ()
    (interactive)
    (setopt whisper-language "pt")
    (vlv/call-whisper-run-print-language))

(defun vlv/whisper-run-french ()
    (interactive)
    (setopt whisper-language "fr")
    (vlv/call-whisper-run-print-language))

(defun vlv/whisper-run-other-lang ()
    (interactive)
    (setopt whisper-language
          (read-string "Insert language to be used by whisper.cpp:"))
    (vlv/call-whisper-run-print-language))

(map! :leader
    :prefix ("z" . "whisper")
    :desc "whisper-run" "z" #'whisper-run
    :desc "whisper-run" "e" #'vlv/whisper-run-english
    :desc "whisper-run" "f" #'vlv/whisper-run-french
    :desc "whisper-run" "o" #'vlv/whisper-run-other-lang
    :desc "whisper-run" "p" #'vlv/whisper-run-portuguese)
#+end_src

* Emacs Web Wowser EWW
** Configuration
#+begin_src emacs-lisp :tangle config.el
(after! eww
  :config
    (add-hook! 'eww-mode-hook
    (olivetti-mode))
    (set-variable 'eww-bookmarks
                '((:url   "https://lars.ingebrigtsen.no/"
                    :title "Random Thoughts - Lars Ingebritsen")
                    (:url   "https://openlibrary.org/"
                    :title "Open Library"))))
#+end_src

* PDF
It can be quite disturbing to have a white background PDF displayed given that both OS and Emacs themes are consistently dark. Thankfully there's a pdf-view-mode function to set a dark colour scheme!

#+begin_src emacs-lisp :tangle config.el
(add-hook! 'pdf-view-mode-hook
           (pdf-view-midnight-minor-mode))
#+end_src
* ibuffer

#+begin_src emacs-lisp :tangle config.el
;; a must have in ergonomics.
(after! ibuffer
  (map! :leader
        (:prefix ("b")
         :desc "Kill buffer and window" "K" #'kill-buffer-and-window)))
#+end_src

* hl-todo
** add warning to the highlighted words

#+begin_src emacs-lisp :tangle config.el
;; append the WARNING keyword to the keyword faces
(use-package! hl-todo
  :defer t
  :config
    (setopt hl-todo-keyword-faces (append hl-todo-keyword-faces '(("WARNING" warning bold))))

    ;; add warning to the base regex used by hl-todo
    (setq hl-todo--regexp "\\(\\<\\(TODO\\|FIXME\\|REVIEW\\|HACK\\|DEPRECATED\\|NOTE\\|BUG\\|XXX\\|WARNING\\)\\>[:]*\\)"))
#+end_src
* Magit
#+begin_src emacs-lisp :tangle config.el
(use-package! magit
  :config
    (defun vlv/delete-merged-branches ()
    "Fetch prune then deletes branches already merged to a target branch.
Found in https://emacs.stackexchange.com/questions/60200/magit-remove-local-branches-that-were-merged-into-another-branch"
    (interactive)
    (magit-fetch-all-prune)
    (let* ((default-branch
            (read-string "Default branch: " (magit-get-current-branch)))
            (merged-branches
            (magit-git-lines "branch"
                            "--format" "%(refname:short)"
                            "--merged"
                            default-branch))
            (branches-to-delete
            (remove default-branch merged-branches)))
        (if branches-to-delete
            (if (yes-or-no-p (concat "Delete branches? ["
                                    (mapconcat 'identity branches-to-delete ", ") "]"))
                (magit-branch-delete branches-to-delete))
        (message "Nothing to delete"))))

    (transient-append-suffix 'magit-branch "C"
        '("K" "delete all merged" vlv/delete-merged-branches)))

(add-hook! 'magit-mode-hook
  (olivetti-mode))
#+end_src

* Flyover :WIP:

Package that increases how flymake and flyckeck syntax checking.

There's some overlay with LSP errors and warnings (in rust at least), hence this is a WIP for now.
#+begin_src emacs-lisp :tangle no

(package! flyover
  :type 'core
  :recipe '(:host github
            :repo "konrad1977/flyover"))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! flyover
  :config
  ;; Enable flyover-mode globally
    (add-hook 'flycheck-mode-hook #'flyover-mode)

    ;; Configure which error levels to display
    ;; Possible values: error, warning, info
    (setopt flyover-levels '(error warning info))

    ;; Use theme colors for error/warning/info faces
    (setopt flyover-use-theme-colors t)

    ;; Adjust background lightness (lower values = darker)
    (setopt flyover-background-lightness 45)

    ;; Make icon background darker than foreground
    (setopt flyover-percent-darker 40)

    ;; "Percentage to lighten or darken the text when tinting is enabled."
    (setopt flyover-text-tint-percent 50)

    ;; Choose which checkers to use (flycheck, flymake, or both)
    (setopt flyover-checkers '(flycheck flymake))

    ;; Enable debug messages
    (setopt flyover-debug nil))  ; Show all levels
#+end_src

* Lookup
#+begin_src emacs-lisp :tangle config.el
(use-package! doom
  :config
    ;; make lookup online use eww insted of default browser.
    (setopt +lookup-open-url-fn 'eww))
#+end_src

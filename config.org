* Introduction
Personal and work doom emacs config.
* Tasks
** DONE Add packages.el configuration here
** TODO Add init.el configuration here
*** [?] how to know about new flags and updates for modules if init.el content is here?
** TODO Make it one single config compatible with windows and linux
automatic environment detection
line endings, path to server file, etc. automatically configured
not installing packages that are not compatible with windows
*** IDEA use org tangling and enabling/disabling it via a function to detect the OS
#+begin_src emacs-lisp :tangle no
;; for linux only config:

(if (eq system-type 'gnu/linux)
    (setq tangle-path-linux config.el)
  (setq tangle-path-linux 'no)
  )

(if (eq system-type 'windows-nt)
    (setq tangle-path-win32 config.el)
  (setq tangle-path-win32 'no)
  )

#+end_src

* Doom
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-dark+)

(setq doom-font (font-spec :family "Fira Mono" :size 14))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

*  Emacs general configs
**  Save command minibuffer command history
#+begin_src emacs-lisp :tangle config.el
(setq history-length 25)
(savehist-mode 1)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

**  Revert buffers when the underlying file has changed
#+begin_src emacs-lisp :tangle config.el
(global-auto-revert-mode 1)
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Text editing
#+begin_src emacs-lisp :tangle config.el
;; Remember and restore the last cursor location of opened files
(save-place-mode 1)
#+end_src
* Org
** Basic config
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "~/org/")
#+end_src

** Org Roam
Shortcuts are mapped with the SPC n r prefix by default.
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)

  (map! :leader
        (:prefix ("n" . "org")
        (:prefix ("r" . "roam")
         :desc "Open org roam UI" "u" #'org-roam-ui-mode))
  ))
#+end_src

* Conda
#+begin_src emacs-lisp :tangle config.el
(use-package! conda
  :config
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))
#+end_src

* Projectile
Allow automatic recognition of projects given a list of paths.
#+begin_src emacs-lisp :tangle config.el
(use-package! projectile
  :config
  (setq projectile-project-search-path '("~/dev"))
  )
#+end_src

* Treemacs
#+begin_src emacs-lisp :tangle config.el
(after! treemacs
  (map! :leader
        (:prefix ("t" . "toggle")
         :desc "Toggle treemacs" "t" #'treemacs))
  )
#+end_src

* vterm
#+begin_src emacs-lisp :tangle config.el
(after! vterm
  (map! :leader
        (:prefix ("t" . "toggle")
         :desc "Toggle vterm" "v" #'+vterm/toggle))
  )
#+end_src

* dirvish
#+begin_src emacs-lisp :tangle config.el
(map! :leader
(:prefix ("t" . "toggle")
:desc "Toggle dirvish" "d" #'dirvish-side))

(setq dirvish-side-width 80)
#end_src

* YASNIPPET
#+begin_src emacs-lisp :tangle config.el
(defun yasnippet-extract-arg-and-type (arg)
  "Extract argument name and type from a string of the form 'arg: type'."
  (let* ((parts (split-string arg ": ")))
    (if (= (length parts) 2)
        (cons (car parts) (cadr parts))
      (cons (car parts) "type"))))

(defun yasnippet-python-params-doc (arg-string)
  "Generates a docstring for parameters in NumPy style with optional type annotations.
If there are no arguments, returns ''."
  (let* ((args (split-string arg-string ", "))
         (formatted-doc
          (if (string-blank-p arg-string)
              ""
            (mapconcat (lambda (arg)
                         (let* ((arg-pair (yasnippet-extract-arg-and-type arg))
                                (arg-name (car arg-pair))
                                (arg-type (cdr arg-pair)))
                           ;; TODO: Generate placeholders for each parameter description.
                           (format "%s : %s\n        TODO: Description of %s." arg-name arg-type arg-name)))
                       args
                       "\n    "))))
    formatted-doc))

(defun yasnippet-python-parameter-assignments (arg-string)
  "Convert a comma-separated string of arguments into self assignments.
If there are no arguments, returns 'pass'."
  (let* ((args (split-string arg-string ", "))
         (assignments
          (if (string-blank-p arg-string)
              "pass"
            (mapconcat (lambda (arg)
                         (let* ((parts (split-string arg ": "))
                                (name (car parts)))
                           (format "self.%s = %s" name name)))
                       args
                       "\n        "))))
    assignments))
#+end_src

** CC mode
*** LSP (clangd)
#+begin_src emacs-lisp :tangle config.el
(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))
#+end_src
*** CMAKE-IDE
[[https://github.com/Fox7Fog/emacs-cmake-ide][GitHub - Fox7Fog/emacs-cmake-ide: Use Emacs as a C/C++ IDE]]
#+begin_src emacs-lisp :tangle packages.el
(package! cmake-ide)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(cmake-ide-setup)
#+end_src

*** TODO Fine tune LSP flags
* LLM support
** gptel installation
#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src
*** Keybindings
#+begin_src emacs-lisp :tangle config.el
(after! gptel
  (map! :leader
        (:prefix ("l" . "gptel")
         :desc "menu" "l" #'gptel-menu
         :desc "send" "s" #'gptel-send
         :desc "open prompt" "p" #'gptel
         :desc "abort" "A" #'gptel-abort
         :desc "add file to context" "a" #'gptel-add-file
         )
  )
)
#+end_src

*** ollama
added only two models that this machine can run
#+begin_src emacs-lisp :tangle config.el
;; default model
(setq gptel-model 'llama3.1:8b)

;; adding Ollama backend
(setq gptel-backend (gptel-make-ollama "Ollama"
        :host "localhost:11434"
        :stream t
        :models '((llama3.1:8b) (llama3.2:3b))))
#+end_src
**** Spawning process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/spawn-ollama-process ()
  "Starts an Ollama server process in the background if there's not already one.

This function runs the `ollama` command with the argument 'serve' to start a server
process. The process is started in the background and does not block Emacs.

Note: This function assumes that you have installed and configured Ollama properly."

  (interactive)

  (if (eq (process-status "ollama") 'run)
        (message "Ollama server is already running")
    )
        (start-process "ollama" "ollama-serve-process" "ollama" "serve")
 )
#+end_src

**** Killing process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/kill-ollama-process ()
  "Kills the running ollama processes.

Assumes the ollama process is named 'ollama-serve-process'."


  (interactive)
        (kill-process "ollama-serve-process")
 )
#+end_src
** Process management
**** Spawning a terminal process
#+begin_src emacs-lisp :tanble config.el
(defvar watch-history nil)
(defun vlv/watch (command &optional name)
  "Runs \"watch COMMAND\" in a `term' buffer.  \"q\" to exit."
  (interactive
   (list (read-from-minibuffer "watch " nil nil nil 'watch-history)))
  (let* ((name (or name (concat "watch " command)))
         (switches (split-string-and-unquote command))
         (termbuf (apply 'make-term name "watch" nil switches))
         (proc (get-buffer-process termbuf)))
    (set-buffer termbuf)
    (term-mode)
    (term-char-mode)
    (setq show-trailing-whitespace nil)
    ;; Kill the process interactively with "q".
    (set-process-query-on-exit-flag proc nil)
    (let ((map (make-sparse-keymap))
          (cmdquit (make-symbol "watch-quit")))
      (put cmdquit 'function-documentation "Kill the `watch' buffer.")
      (put cmdquit 'interactive-form '(interactive))
      (fset cmdquit (apply-partially 'kill-process proc))
      (set-keymap-parent map (current-local-map))
      (define-key map (kbd "q") cmdquit)
      (use-local-map map))
    ;; Kill the buffer automatically when the process is killed.
    (set-process-sentinel
     proc (lambda (process signal)
            (and (memq (process-status process) '(exit signal))
                 (buffer-live-p (process-buffer process))
                 (kill-buffer (process-buffer process)))))
    ;; Display the buffer.
    (switch-to-buffer termbuf)))

#+end_src
***** TODO open window after calling int
***** TODO go to new window once its opened
***** TODO make window killable using "q"

**** Spawning nvidia smi watch process
#+begin_src emacs-lisp :tangle no
(defun vlv/open-nvidia-performance_tracker ()
  "Starts a process to display NVIDIA GPU data.

Spaws a child process using UNIX watch command using nvidia-smi command."

  (interactive)
  (vlv/watch "-n0.1 nvidia-smi")
 )
#+end_src
***** TODO FIXME
* bug-hunter
#+begin_src emacs-lisp :tangle packages.el
(package! bug-hunter)
#+end_src

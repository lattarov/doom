* Introduction
Personal and work doom emacs config.
* Tasks
** DONE Add packages.el configuration here
** IDEA Add init.el configuration here
*** [?] how to know about new flags and updates for modules if init.el content is here?

* Cross platform compatibility :wip:
#+begin_src emacs-lisp :tangle no

(setq vlv/config "NOT_YET_SET")

(defun vlv/is-work-config()
  "Returns t if in a Windows environment."
  (if (eq system-type 'windows-nt)
      (setq vlv/config "WORK")))

(defun vlv/is-personal-config()
  "Returns t if in a linux environment."
  (if (eq system-type 'gnu/linux)
      (setq vlv/config "PERSONAL")))

(defun vlv/config()
  (interactive)
  (vlv/is-personal-config())
  (vlv/is-work-config())
  (message (concat "Configuration type is:" 'vlv/config)))

#+end_src

* Doom
#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Fira Mono" :size 14))

(if (eq system-type 'windows-nt)
        (setq doom-font (font-spec :family "Cascadia Code" :size 14))
  )


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; sets emacs general opacity
(doom/set-frame-opacity 97)
#+end_src

*  Emacs general configs
**  Save command minibuffer command history
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Victor Lattaro Volpini"
      user-mail-address "victorlattaro@gmail.com")

(setq history-length 25)

(savehist-mode 1)
#+end_src

**  Revert buffers when the underlying file has changed
#+begin_src emacs-lisp :tangle config.el
(global-auto-revert-mode 1)
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Text editing
#+begin_src emacs-lisp :tangle config.el
;; Remember and restore the last cursor location of opened files
(save-place-mode 1)
#+end_src
** Theme
#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'catppuccin)
** Terminals (WIP)
this configures bash to be used as the default shell bash. In theory it corrects a few issues concerning

#+begin_src emacs-lisp :tangle no
;; Configuring terminal for windows
(if (eq system-type 'windows-nt)
        (setq shell-file-name "C:/Windows/system32/bash.exe")
        (setenv "ESHELL" "bash")
 )
#+end_src
* olivetti mode

#+begin_src emacs-lisp :tangle packages.el
(package! olivetti)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(defun vlv/olivetti-mode-hook()
"Hook to be called when opening an org agenda buffer"
        (olivetti-mode)
        (olivetti-set-width 120))
#+end_src

* Org
** Basic config
#+begin_src emacs-lisp :tangle config.el

(if (eq system-type 'windows-nt)
        (setq org-directory "~/OneDrive - TIAMA/org")
        (setq org-directory "~/org/"))

(setq org-agenda-start-on-weekday "1")

(add-hook! 'org-mode-hook
        (vlv/olivetti-mode-hook))
#+end_src
** Org agenda
*** Improvements
**** ideas from [[https://www.youtube.com/watch?v=a_WNtuefREM][Making Org Agenda Look Beautiful - YouTube]]
***** TODO  [[https://github.com/alphapapa/org-super-agenda][GitHub - alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda...]] integration
***** TODO add icons and improve agenda view using icons
***** TODO create templates for org roam to create events from nodes

*** Configuration
#+begin_src emacs-lisp :tangle config.el

(add-hook! 'prog-mode-hook
        (vlv/olivetti-mode-hook))

(setq org-agenda-files
      (mapcar (lambda (dir) (expand-file-name dir org-directory))
              '("agenda/" "roam/" "journal/" "~/.config/doom/")))

(setq org-agenda-start-on-weekday 1) ;; start on monday
#+end_src

** Org Roam
Shortcuts are mapped with the SPC n r prefix by default.
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)

  (setq org-roam-directory (expand-file-name "roam/" org-directory)) ;; necessary use the org directory set on the

  (map! :leader
        (:prefix ("n" . "org")
        (:prefix ("r" . "roam")
         :desc "Open org roam UI" "u" #'org-roam-ui-mode))))
#+end_src
** org modern

#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(global-org-modern-mode)
#+end_src
** Babel
#+begin_src emacs-lisp :tangle config.el
(org-babel-do-load-languages
'org-babel-load-languages
'((shell . t)
  (org . t)
  (python . t)
  (rust . t)
  (cpp . t)
  (plantuml . t)
  (emacs-lisp . t)))
#+end_src

* Python
** Conda
#+begin_src emacs-lisp :tangle config.el
(use-package! conda
  :config
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))
#+end_src
* uv :wip:
A new package manager for python, much faster and simpler to use than conda or miniconda.

#+begin_src emacs-lisp :tangle no

(package! uv-menu
  :type 'core
  :recipe '(:host github
            :repo "pizzatorque/uv-menu"
            :branch "main"
            :files ("uv.el")))

#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! uv-menu)

#+end_src

* Projectile
Allow automatic recognition of projects given a list of paths.
#+begin_src emacs-lisp :tangle config.el
(use-package! projectile
  :config
  (setq projectile-project-search-path '("~/dev")))
#+end_src

* Treemacs
#+begin_src emacs-lisp :tangle config.el
(use-package! treemacs
  :config
  (map! :leader
    (:prefix ("t" . "toggle")
     :desc "Toggle treemacs" "t" #'treemacs)))
#+end_src

* vterm
#+begin_src emacs-lisp :tangle config.el
(after! vterm
  (map! :leader
        (:prefix ("t" . "toggle")
         :desc "Toggle vterm" "v" #'+vterm/toggle)))
#+end_src

* dirvish
#+begin_src emacs-lisp :tangle config.el
(map! :leader
(:prefix ("t" . "toggle")
:desc "Toggle dirvish" "d" #'dirvish-side))

(setq dirvish-side-width 80)
#+end_src

* YASNIPPET
#+begin_src emacs-lisp :tangle config.el
(defun yasnippet-extract-arg-and-type (arg)
  "Extract argument name and type from a string of the form 'arg: type'."
  (let* ((parts (split-string arg ": ")))
    (if (= (length parts) 2)
        (cons (car parts) (cadr parts))
      (cons (car parts) "type"))))

(defun yasnippet-python-params-doc (arg-string)
  "Generates a docstring for parameters in NumPy style with optional type annotations.
If there are no arguments, returns ''."
  (let* ((args (split-string arg-string ", "))
         (formatted-doc
          (if (string-blank-p arg-string)
              ""
            (mapconcat (lambda (arg)
                         (let* ((arg-pair (yasnippet-extract-arg-and-type arg))
                                (arg-name (car arg-pair))
                                (arg-type (cdr arg-pair)))
                           ;; TODO: Generate placeholders for each parameter description.
                           (format "%s : %s\n        TODO: Description of %s." arg-name arg-type arg-name)))
                       args
                       "\n    "))))
    formatted-doc))

(defun yasnippet-python-parameter-assignments (arg-string)
  "Convert a comma-separated string of arguments into self assignments.
If there are no arguments, returns 'pass'."
  (let* ((args (split-string arg-string ", "))
         (assignments
          (if (string-blank-p arg-string)
              "pass"
            (mapconcat (lambda (arg)
                         (let* ((parts (split-string arg ": "))
                                (name (car parts)))
                           (format "self.%s = %s" name name)))
                       args
                       "\n        "))))
    assignments))
#+end_src

** CC mode
*** LSP (clangd)
#+begin_src emacs-lisp :tangle config.el
(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))
#+end_src
*** CMAKE-IDE
[[https://github.com/Fox7Fog/emacs-cmake-ide][GitHub - Fox7Fog/emacs-cmake-ide: Use Emacs as a C/C++ IDE]]
#+begin_src emacs-lisp :tangle packages.el
(package! cmake-ide)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(cmake-ide-setup)
#+end_src

*** TODO Fine tune LSP flags
* LLM support
** gptel installation
#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src
*** Keybindings
#+begin_src emacs-lisp :tangle config.el
(after! gptel
  (map! :leader
        (:prefix ("l" . "gptel")
         :desc "menu" "l" #'gptel-menu
         :desc "send" "s" #'gptel-send
         :desc "open prompt" "p" #'gptel
         :desc "abort" "A" #'gptel-abort
         :desc "add file to context" "a" #'gptel-add-file))

  ;; window to scroll automatically as the response is inserted
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  ;; make cursor to move to the next prompt after the response is inserted
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response))
#+end_src

*** ollama
added only two models that this machine can run
#+begin_src emacs-lisp :tangle config.el
;; default model
(setq gptel-model 'qwen2.5-coder:7b)

;; adding Ollama backend
(setq gptel-backend (gptel-make-ollama "Ollama"
        :host "localhost:11434"
        :stream t
        :models '((llama3.1:8b) (llama3.2:3b) (qwen2.5-coder:7b))))
#+end_src
**** Spawning process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/spawn-ollama-process ()
  "Starts an Ollama server process in the background if there's not already one.

This function runs the `ollama` command with the argument 'serve' to start a server
process. The process is started in the background and does not block Emacs.

Note: This function assumes that you have installed and configured Ollama properly."

  (interactive)

  (if (eq (process-status "ollama") 'run)
        (message "Ollama server is already running"))

        (start-process "ollama" "ollama-serve-process" "ollama" "serve"))
#+end_src

**** Killing process
#+begin_src emacs-lisp :tangle config.el
(defun vlv/kill-ollama-process ()
  "Kills the running ollama processes.

  Assumes the ollama process is named 'ollama-serve-process'."
  (interactive)
  (kill-process "ollama-serve-process"))
#+end_src
** Process management
**** Spawning a terminal process
#+begin_src emacs-lisp :tangle config.el
(defvar watch-history nil)
(defun vlv/watch (command &optional name)
  "Runs \"watch COMMAND\" in a `term' buffer.  \"q\" to exit."
  (interactive
   (list (read-from-minibuffer "watch " nil nil nil 'watch-history)))
  (let* ((name (or name (concat "watch " command)))
         (switches (split-string-and-unquote command))
         (termbuf (apply 'make-term name "watch" nil switches))
         (proc (get-buffer-process termbuf)))
    (set-buffer termbuf)
    (term-mode)
    (term-char-mode)
    (setq show-trailing-whitespace nil)
    ;; Kill the process interactively with "q".
    (set-process-query-on-exit-flag proc nil)
    (let ((map (make-sparse-keymap))
          (cmdquit (make-symbol "watch-quit")))
      (put cmdquit 'function-documentation "Kill the `watch' buffer.")
      (put cmdquit 'interactive-form '(interactive))
      (fset cmdquit (apply-partially 'kill-process proc))
      (set-keymap-parent map (current-local-map))
      (define-key map (kbd "q") cmdquit)
      (use-local-map map))
    ;; Kill the buffer automatically when the process is killed.
    (set-process-sentinel
     proc (lambda (process signal)
            (and (memq (process-status process) '(exit signal))
                 (buffer-live-p (process-buffer process))
                 (kill-buffer (process-buffer process)))))
    ;; Display the buffer.
    (switch-to-buffer termbuf)))

#+end_src
***** TODO open window after calling int
***** TODO go to new window once its opened
***** TODO make window killable using "q"

**** Spawning nvidia smi watch process
#+begin_src emacs-lisp :tangle no
(defun vlv/open-nvidia-performance_tracker ()
  "Starts a process to display NVIDIA GPU data.

Spaws a child process using UNIX watch command using nvidia-smi command."

  (interactive)
  (vlv/watch "-n0.1 nvidia-smi"))
#+end_src
***** TODO FIXME
* bug-hunter
#+begin_src emacs-lisp :tangle packages.el
(package! bug-hunter)
#+end_src

* RSS feed
*** Add feeds to the reader
feeds are read in ~/org/elfeed.org by default. We need to add all feeds we want and corresponding tags and simply export it to the elfeed org file.
#+begin_src org :tangle ~/org/elfeed.org

#+title: elfeed

* root :elfeed:
** Tech :tech:
*** [[https://korben.info/feed][Les news de Korben]] :FR:
** Podcasts :podcasts:
*** [[https://lexfridman.com/feed/podcast/][Lex Fridman Podcast]]  :tech:
** Programming :programming:
*** [[https://this-week-in-rust.org/rss.xml][This Week in Rust]] :rust:
*** [[https://buttondown.com/entropicthoughts/rss][Entropic Thoughts]]
*** [[https://meetingcpp.com/feed.xml][Meeting C++ Feed]] :cpp:
** Science :science:
*** [[https://api.quantamagazine.org/feed/][Quanta Magazine]]
** Technology :tech:
*** [[https://www.erichgrunewald.com/feed.xml][Erich Grunewald's Blog]]
** Fun :fun:
*** [[https://xkcd.com/rss.xml][xkcd]] :xkcd:
** Miscellaneous :misc:
[[https://protesilaos.com/master.xml][Protesilaos Stavrou: Master feed with all updates]]

#+end_src

** Configuring elfeed
#+begin_src emacs-lisp :tangle config.el
;; global mapping
(map! :leader
      (:prefix ("e" . "elfeed")
       :desc "Enter elfeed" "e" #'elfeed
       :desc "Update all feeds" "u" #'elfeed-update))

(after! elfeed
  ;; the basic value cuts a part of the feed's title.
  ;; Increasing the column width fixes it.
  (setq elfeed-goodies/feed-source-column-width 20))
#+end_src

** Removing items from the feed
Strangely, elfeed does not allow us to delete entries that we don't want to see
in the feed anymore. Moreover, when a feed is deleted, its entries are not
removed from the feed.

A solution is proposed by [[https://github.com/skeeto/elfeed/issues/392][skeeto/elfeed#392 Deleting feeds with all their
entries]], it works by deleting selected items feed from elfeed's database.
#+begin_src emacs-lisp :tangle config.el
(defun sk/elfeed-db-remove-entry (id)
  "Removes the entry for ID"
  (avl-tree-delete elfeed-db-index id)
  (remhash id elfeed-db-entries))

(defun sk/elfeed-search-remove-selected ()
  "Remove selected entries from database"
  (interactive)
  (let* ((entries (elfeed-search-selected))
	 (count (length entries)))
    (when (y-or-n-p (format "Delete %d entires?" count))
      (cl-loop for entry in entries
	       do (sk/elfeed-db-remove-entry (elfeed-entry-id entry)))))
  (elfeed-search-update--force))
#+end_src
* Completions
** Corfu
#+begin_src emacs-lisp :tangle config.el
(use-package! corfu
  :config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
#+end_src
** Consult-omni :wip:
[[https://github.com/armindarvish/consult-omni?tab=readme-ov-file#drop-in-example-config][GitHub - armindarvish/consult-omni: A Powerful Versatile Omni Search inside E...]]

"consult-omni is a package for getting search results from one or several custom
sources (web search engines, AI assistants, elfeed database, org notes, local
files, desktop applications, mail servers, …) directly in Emacs minibuffer. It
is a successor of consult-web, with expanded features and functionalities."

It still in its beta phase, having its first release in July 24'.

Some security concerns arise due to using emacs as a web browser... This is to
be tested and tracked over time. The project seems nevertheless extremely
promising and would bring plenty of nice features to the config.

#+begin_src emacs-lisp :tangle packages.el
(package! consult-omni
  :type 'core
  :recipe '(:host github
            :repo "armindarvish/consult-omni"
            :files ("sources/*.el" "consult-omni.el" "consult-omni-embark.el")
            :build t))

(package! consult-mu
  :type 'core
  :recipe '(:host github
            :repo "armindarvish/consult-mu"
            :branch "main"
            :files (:defaults "extras/*.el")))

#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! consult-mu
  :custom

  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed
  (consult-mu-mark-previewed-as-read nil)
  ;;do not amrk email as read when selected. This is a good starting point to ensure you would not miss important emails marked as read by mistake especially when trying this package out. Later you can change this to t.
  (consult-mu-mark-viewed-as-read nil)
  ;; open the message in mu4e-view-buffer when selected.
  (consult-mu-action #'consult-mu--view-action))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! consult-omni
  :custom

  ;; General settings that apply to all sources
  (consult-omni-show-preview t) ;;; show previews
  (consult-omni-preview-key "C-o") ;;; set the preview key to C-o
  :config
  ;; Load Sources Core code
  (require 'consult-omni-sources)
  ;; Load Embark Actions
  (require 'consult-omni-embark)

  ;;; Select a list of modules you want to aload, otherwise all sources all laoded
  (setq consult-omni-sources-modules-to-load (list 'consult-omni-notes  'consult-omni-file 'consult-omni-buffer 'consult-omni-buffer-search 'consult-omni-elfeed 'consult-omni-wikipedia 'consult-omni-apps 'consult-omni-dictionary 'consult-omni-gptel))

  (consult-omni-sources-load-modules)
  ;;; set multiple sources for consult-omni-multi command. Change these lists as needed for different interactive commands. Keep in mind that each source has to be a key in `consult-omni-sources-alist'.
  (setq consult-omni-multi-sources '("calc"
                                     "File"
                                     "Buffer"
                                     ;; "DuckDuckGo"
                                     ;; "Bookmark"
                                     "Apps"
                                     "gptel"
                                     ;; "Brave"
                                     "Dictionary"
                                     ;; "Google"
                                     "Wikipedia"
                                     "elfeed"
                                     "mu4e"
                                     "buffers text search"
                                     "Notes Search"
                                     "Org Agenda"
                                     ;; "GitHub"
                                     ;; "YouTube"
                                     ;; "Invidious"
                                     ))

;; Per source customization

;;; Pick you favorite autosuggest command.
  (setq consult-omni-default-autosuggest-command #'consult-omni-dynamic-brave-autosuggest) ;;or any other autosuggest source you define

 ;;; Set your shorthand favorite interactive command
  (setq consult-omni-default-interactive-command #'consult-omni-multi))
:bind
  (map! :leader
        (:prefix ("s" . "search")
         :desc "consult-omni-multi" "s" #'consult-omni-multi))
  #+end_src
* Mail
** Mu4e
*** Remaining work
*** TODO Cryptograph the password
*** TODO gmail setup
**** [ ] add guide on how to create an application-specific password on google
**** [ ] setup smtp server or 2FA for gmail
*** TODO proton setup
**** [ ] configure for proton mail
**** [ ] install proton bridge

*** DONE Installation error pitfall
DEADLINE: <2024-11-26 mar.> SCHEDULED: <2024-11-25 lun.>
Because of some Ubuntu based bug, if mu4e was installed by the package manager (APT in Pop OS case) then the following bug shows up:

#+begin_quote
execute-extended-command: Cannot open load file: No such file or directory, mu4e
#+end_quote

As recommended in doom's mu4e docs as well as in [[https://github.com/doomemacs/doomemacs/issues/7885][doomemacs/doomemacs#7885 Can't open mu4e]] , manually adding the load path fixes this.

#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "config.el" "no")

-(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

But different bugs arise, apparently related to a header error in mu4e or something else. It seems that the mu version installed by apt is not really functional.

**** Mu4e
WARNING there's a hard dependency between mu and mu4e versions.
#+begin_src sh :tangle no
sudo apt-get install mu4e
#+end_src

In order to set the mail directory and do the first setup for mu's database, use the following command:

#+begin_src sh :tangle no
mu init --maildir=~/Mail
#+end_src

it should return something like this:

#+begin_#+begin_quote
maildir           : /home/lattaro/Mail
database-path     : /home/lattaro/.cache/mu/xapian
schema-version    : 452
max-message-size  : 100000000
batch-size        : 250000
messages in store : 0
created           : dim. 24 nov. 2024 23:26:27
personal-address  : <none>
#+end_quote

#+end_#+begin_quote

maildir           : /home/lattaro/Mail
database-path     : /home/lattaro/.cache/mu/xapian
schema-version    : 452
max-message-size  : 100000000
batch-size        : 250000
messages in store : 0
created           : dim. 24 nov. 2024 23:26:27
personal-address  : <none>
#+end_quote

#+begin_src sh :tangle no
mu index
#+end_src

*** Installing dependencies
**** mbsync (aka isync)
#+begin_src sh :tangle  no
sudo apt-get install isync
#+end_src

mbsync also requires a config file to be placed in the home directory. Here's the current file only configured for gmail.

#+begin_src ini :tangle no
IMAPStore gmail-remote
Host imap.gmail.com
SSLType IMAPS
AuthMechs LOGIN
User victorlattaro@gmail.com
Pass "epcw alkb kynv svai"

MaildirStore gmail-local
Path ~/Mail/gmail/
Inbox ~/Mail/gmail/INBOX
Subfolders Verbatim

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Create Both
Expunge Both
Patterns *
SyncState *
#+end_src

Next, the mail directory (or MailDir in mu's vocabulary) must be created. By default, it's a ~/Mail, which is not automatically created. Let's do so:

#+begin_src sh :tangle no
mkdir ~/Mail
#+end_src

finally, the following command pulls the mail from the given provider:

#+begin_src sh :tangle no
mbsync -Va
#+end_src


**** mu
The solution was to manually compile mu and install it by following instructions in [[github:https://github.com/djcb/mu][mu]].

According to the README:

To be able to build mu, ensure you have:

a C++17 compiler (gcc or clang are known to work)
development packages for Xapian and GMime and GLib (see meson.build for the versions)
basic tools such as make, sed, grep
meson

clone somewhere the latest release from mu, I used https://github.com/djcb/mu/releases/tag/v1.12.7
(this version already comes with mu4e)

cd wherever mu tarball was decompressed to and the autogen and make install

./autogen.sh && make
sudo make install

Create the Maildir, in this config it is set to ~/Mail and run

mu init --maildir ~/Mail
mu index

Add mu4e installation path to Emacs' load path.
#+begin_src emacs-lisp :tangle config.el
;; installation path for mu4e installed by the makefile of mu-1.12.7
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#+end_src

From this point onwards, mu4e should be up and running.
*** Configuration

#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "config.el" "no")
;; Each path is relative to the path of the maildir you passed to mu

;; (setq mu4e-get-mail-command "mbsync gmail"
;;       ;; get emails and index every 5 minutes
;;       mu4e-update-interval 300
;; 	  ;; send emails with format=flowed
;; 	  mu4e-compose-format-flowed t
;; 	  ;; no need to run cleanup after indexing for gmail
;; 	  mu4e-index-cleanup nil
;; 	  mu4e-index-lazy-check t
;;       ;; more sensible date format
;;       mu4e-headers-date-format "%d.%m.%y")

(set-email-account! "@gmail.com"
  '((mu4e-sent-folder       . "/gmail/Sent Mail")
    (mu4e-drafts-folder     . "/gmail/Drafts")
    (mu4e-trash-folder      . "/gmail/Trash")
    (mu4e-refile-folder     . "/gmail/All Mail")
    (smtpmail-smtp-user     . "victorlattaro@gmail.com")
    (mu4e-compose-signature . "---\nVictor Lattaro Volpini"))
  )
;; if "gmail" is missing from the address or maildir, the account must be
;; specified manually in `+mu4e-gmail-accounts':
(setq +mu4e-gmail-accounts '(("victorlattaro@gmail.com" . "/victorlattaro")))

;; Each path is relative to the path of the maildir you passed to mu
(setq mu4e-index-cleanup nil
      ;; because gmail uses labels as folders we can use lazy check since
      ;; messages don't really "move"
      mu4e-index-lazy-check t)
#+end_src
* Copilot
#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

#+end_src
